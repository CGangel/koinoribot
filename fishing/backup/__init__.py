import os
import random

import hoshino
from hoshino import Service
from ..GroupFreqLimiter import check_reload_group, set_reload_group
from hoshino.util import FreqLimiter
from hoshino.config import SUPERUSERS

from .. import money, config
from .._R import get, userPath
from .util import shift_time_style, update_serif
from ..utils import chain_reply, saveData
from ..config import SEND_FORWARD, FISH_LIST

from .get_fish import fishing, buy_bait, free_fish, sell_fish, change_fishrod, compound_bottle, getUserInfo, increase_value, decrease_value
from .serif import cool_time_serif
from .get_bottle import get_bottle_amount, check_bottle, format_message, check_permission, check_content, set_bottle, delete_bottle, add_to_blacklist, remove_from_blacklist, show_blacklist, format_msg_no_forward
from .._interact import interact, ActSession
from .evnet_functions import random_event


'''if not config.DEBUG_MODE:
    SUPERUSERS = [SUPERUSERS[0]]'''

event_list = list(random_event.keys())

sv = Service("ÂÜ∞Á•à‰∏éÈ±º", enable_on_default=True)

_help = '''
<---ÂÜ∞Á•à‰∏éÈ±º--->
#ÈíìÈ±ºÂ∏ÆÂä©  üé£ÊâìÂºÄÂ∏ÆÂä©ËèúÂçï
#ÈíìÈ±º/#üé£  üé£ÂºÄÂßãÈíìÈ±º
#‰π∞È±ºÈ•µ Êï∞Èáè(ÂèØÈÄâ)  üé£Ë¥≠‰π∞È±ºÈ•µ
#ËÉåÂåÖ/#‰ªìÂ∫ì  üé£Êü•ÁúãËÉåÂåÖ
#ÂçñÈ±º/#sell üêüü¶êüê° Êï∞Èáè(ÂèØÈÄâ)  üé£Âá∫ÂîÆÔºåÊï∞ÈáèÂíåÈ±ºÁî®Á©∫Ê†ºÈöîÂºÄ
#ÊîæÁîü/#free üêüü¶êüê° Êï∞Èáè(ÂèØÈÄâ)  üé£ÊîæÁîüÔºåÂêå‰∏ä
#ÈíìÈ±ºÁªüËÆ°/#ÈíìÈ±ºËÆ∞ÂΩï  üé£Êü•ÁúãËá™Â∑±ÁöÑÈíìÈ±ºËÆ∞ÂΩï
üîÆ‰∏∫Ê∞¥‰πãÂøÉÔºåÊî∂ÈõÜ2‰∏™ÂèØ‰ª•ÂêàÊàê‰∏Ä‰∏™ÊºÇÊµÅÁì∂
‰πüÂèØ‰ª•Ê∂àËÄó‰∏§‰∏™Ê∞¥‰πãÂøÉÊù•ÊâìÊçûÊºÇÊµÅÁì∂
ÊîæÁîüË∂≥Â§üÂ§öÁöÑËØùÂèØ‰ª•Ëé∑ÂæóÁâπÂà´Ë∞¢Á§º
#ÂêàÊàêÊºÇÊµÅÁì∂ Êï∞Èáè(ÂèØÈÄâ)  üé£Ê∂àËÄóÊ∞¥‰πãÂøÉÂêàÊàê
#ÊâîÊºÇÊµÅÁì∂ Ê∂àÊÅØ(ÊñáÂ≠óÊàñÂõæÁâá)  üé£ÊäïÊîæ‰∏Ä‰∏™ÊºÇÊµÅÁì∂
#Êç°ÊºÇÊµÅÁì∂  üé£ÊâìÊçûÊºÇÊµÅÁì∂
'''.strip()

rod_help = '''
ÂΩìÂâçÈ±ºÁ´øÔºö
1.ÊôÆÈÄöÈ±ºÁ´ø
2.Ê∞∏‰∏çÁ©∫ÂÜõÈíìÁ´ø(‰∏ç‰ºöÁ©∫ÂÜõ)
3.Êµ∑‰πãÁú∑È°æÈíìÁ´ø(Á®ÄÊúâÈ±ºÊ¶ÇÁéáUP)
4.Êó∂ËøêÈíìÁ´ø(Ê¶ÇÁéáÂèåÂÄçÈ±º)
ÂèëÈÄÅ"#Êç¢ÈíìÁ´ø+ID"Êõ¥Êç¢ÈíìÁ´ø
'''.strip()

event_flag = {}

no = get('emotion/no.png').cqcode
ok = get('emotion/ok.png').cqcode
fish_list = FISH_LIST + ['‚úâ', 'üçô', 'Ê∞¥‰πãÂøÉ']
admin_path = os.path.join(userPath, 'fishing/db/admin.json')
freq = FreqLimiter(config.COOL_TIME)
throw_freq = FreqLimiter(config.THROW_COOL_TIME)
get_freq = FreqLimiter(config.SALVAGE_COOL_TIME)


@sv.on_fullmatch('#ÈíìÈ±ºÂ∏ÆÂä©', 'ÈíìÈ±ºÂ∏ÆÂä©')
async def fishing_help(bot, ev):
    if check_reload_group(ev.group_id, _type='boolean'):
        await bot.send(ev, 'Â≠óÂ§™Â§ö‰∫ÜÔºåÁøªÁúã‰∏Ä‰∏ãÊ∂àÊÅØËÆ∞ÂΩïÂêßQAQ')
        return
    set_reload_group(ev.group_id, _time=600)
    await bot.send(ev, _help)


@sv.on_fullmatch('#ÈíìÈ±º', '#üé£', 'ÔºÉÈíìÈ±º', 'ÔºÉüé£', 'üé£', 'ÈíìÈ±º', 'gofishing')
async def go_fishing(bot, ev):
    uid = ev.user_id
    user_info = getUserInfo(uid)
    if not freq.check(uid) and not config.DEBUG_MODE:
        await bot.send(ev, random.choice(cool_time_serif) + f'({int(round(freq.left_time(uid)) / 60)}min)')
        return
    if user_info['fish']['üçô'] == 0:
        await bot.send(ev, 'Ê≤°ÊúâÈ±ºÈ•µÂñîÔºåË¶Å‰π∞ÁÇπÈ±ºÈ•µÂòõÔºü(ÊàñÂèëÈÄÅ#ÈíìÈ±ºÂ∏ÆÂä©)')
        return
    freq.start_cd(uid)
    await bot.send(ev, '‰Ω†ÂºÄÂßã‰∫ÜÈíìÈ±º...')
    decrease_value(uid, 'fish', 'üçô', 1)

    resp = fishing(uid)

    if resp['code'] == 1:
        msg = resp['msg']
        await bot.send(ev, msg, at_sender=True)
        return
    elif resp['code'] == 2:  # ÊºÇÊµÅÁì∂Ê®°Âºè (2023.5.18 Â∞Ü‰∏ç‰ºöÂÜçÈíì‰∏äÊºÇÊµÅÁì∂Ôºå‰ªÖËÉΩÈÄöËøáÊ∞¥‰πãÂøÉÊç°Ëµ∑)
        increase_value(uid, 'fish', 'üîÆ', 1)
        await bot.send(ev, f'‰Ω†ÂèëÁé∞È±ºÁ´øÊúâÁùÄÂºÇ‰∫éÂπ≥Â∏∏ÁöÑÊÑüËßâÔºåÁ´üÁÑ∂ÈíìÂà∞‰∫Ü‰∏ÄÈ¢óÊ∞¥‰πãÂøÉüîÆ~', at_sender=True)
        return
    elif resp['code'] == 3:  # ÈöèÊú∫‰∫ã‰ª∂Ê®°Âºè
        choose_ev = random.choice(event_list)
        hoshino.logger.info(choose_ev) if config.DEBUG_MODE else None
        session = ActSession.from_event(choose_ev, ev, max_user=1, usernum_limit=True)
        try:
            interact.add_session(session)
        except ValueError:
            hoshino.logger.error('‰∏§‰∏™‰∫∫ÁöÑÈöèÊú∫‰∫ã‰ª∂ÂÜ≤Á™Å‰∫Ü„ÄÇ')
            increase_value(uid, 'fish', '‚úâ', 1)
            await bot.send(ev, '‰Ω†ÁöÑÈ±ºÈí©Á¢∞Âà∞‰∫Ü‰∏Ä‰∏™Á©∫ÊºÇÊµÅÁì∂ÔºÅÂèØ‰ª•‰ΩøÁî®"#ÊâîÊºÇÊµÅÁì∂+ÂÜÖÂÆπ"‰ΩøÁî®ÂÆÉÂì¶ÔºÅ')
            return
        session.state['started'] = True
        event_flag[str(uid)] = choose_ev
        msg = random_event[choose_ev]['msg'] + '\n'.join(random_event[choose_ev]['choice'])
        msg += '\n(ÂèëÈÄÅ/+ÈÄâÈ°πIDÂÆåÊàêÈÄâÊã©~)'
        await bot.send(ev, msg, at_sender = True)
    else:
        return


@sv.on_prefix('#‰π∞È±ºÈ•µ', '#‰π∞È•≠Âõ¢', '#‰π∞üçô', '#Ë¥≠‰π∞È±ºÈ•µ', '#Ë¥≠‰π∞', '#Ë¥≠‰π∞È•≠Âõ¢', 'ÔºÉ‰π∞È±ºÈ•µ', 'ÔºÉ‰π∞È•≠Âõ¢', 'ÔºÉ‰π∞üçô', 'ÔºÉË¥≠‰π∞È±ºÈ•µ', 'ÔºÉË¥≠‰π∞', 'ÔºÉË¥≠‰π∞È•≠Âõ¢')
async def buy_bait_func(bot, ev):
    uid = ev.user_id
    user_info = getUserInfo(uid)
    if user_info['fish']['üçô'] > 150:
        await bot.send(ev, 'ËÉåÂåÖÂ§™Êª°ÔºåË£Ö‰∏ç‰∏ã...' + no)
        return
    message = ev.message.extract_plain_text().strip()
    if not message or not str.isdigit(message):
        num = 1
    else:
        num = int(message)
    if num>50:
        await bot.send(ev, '‰∏ÄÊ¨°Âè™ËÉΩË¥≠‰π∞50‰∏™È±ºÈ•µÂñî' + no)
        return
    user_gold = money.get_user_money(uid, 'gold')
    if user_gold<num * config.BAIT_PRICE:
        await bot.send(ev, 'ÈáëÂ∏Å‰∏çË∂≥Âñî...' + no)
        return
    buy_bait(uid, num)
    await bot.send(ev, f'Â∑≤ÁªèÊàêÂäüË¥≠‰π∞{num}‰∏™È±ºÈ•µÂï¶~(ÈáëÂ∏Å-{num * config.BAIT_PRICE})')


@sv.on_fullmatch('#ËÉåÂåÖ', '#‰ªìÂ∫ì', '#ÊàëÁöÑËÉåÂåÖ', '#ÊàëÁöÑ‰ªìÂ∫ì', 'ÔºÉËÉåÂåÖ', 'ÔºÉ‰ªìÂ∫ì', 'ÔºÉÊàëÁöÑËÉåÂåÖ', 'ÔºÉÊàëÁöÑ‰ªìÂ∫ì', '#üéí', "#bag")
async def my_fish(bot, ev):
    uid = ev.user_id
    user_info = getUserInfo(uid)
    msg = 'ËÉåÂåÖÔºö\n'
    items = ''
    for i, j in user_info['fish'].items():
        if j == 0:
            continue
        items += f'{i}√ó{j}\n'
    if not items:
        items = 'Á©∫Á©∫Â¶Ç‰πü...'
    msg = msg + items
    await bot.send(ev, msg.strip('\n'), at_sender=True)


@sv.on_prefix('#ÊîæÁîü', '#free', 'ÔºÉÊîæÁîü', 'ÔºÉfree')
async def free_func(bot, ev):
    message = ev.message.extract_plain_text().strip()
    msg_split = message.split()
    fish = ''
    num = 0
    if len(msg_split) == 2:
        if msg_split[0] not in FISH_LIST:
            return
        if not str.isdigit(msg_split[-1]):
            return
        fish = msg_split[0]
        num = int(msg_split[-1])
    elif len(msg_split) == 1:
        if msg_split[0] not in FISH_LIST:
            return
        fish = msg_split[0]
        num = 1
    else:
        return
    uid = ev.user_id
    result = free_fish(uid, fish, num)
    await bot.send(ev, result, at_sender=True)


@sv.on_prefix('#ÂçñÈ±º', '#sell', '#Âá∫ÂîÆ', 'ÔºÉÂçñÈ±º', 'ÔºÉsell', 'ÔºÉÂá∫ÂîÆ')
async def free_func(bot, ev):
    message = ev.message.extract_plain_text().strip()
    msg_split = message.split()
    fish = ''
    num = 0
    if len(msg_split) == 2:
        if msg_split[0] not in ['üçô'] + FISH_LIST:
            return
        if not str.isdigit(msg_split[-1]):
            return
        fish = msg_split[0]
        num = int(msg_split[-1])
    elif len(msg_split) == 1:
        if msg_split[0] not in ['üçô'] + FISH_LIST:
            return
        fish = msg_split[0]
        num = 1
    else:
        return
    uid = ev.user_id
    result = sell_fish(uid, fish, num)
    await bot.send(ev, result, at_sender=True)


@sv.on_fullmatch('#ÈíìÈ±ºÁªüËÆ°', '#ÈíìÈ±ºËÆ∞ÂΩï', 'ÔºÉÈíìÈ±ºÁªüËÆ°', 'ÔºÉÈíìÈ±ºËÆ∞ÂΩï')
async def statistic_of_fish(bot, ev):
    uid = ev.user_id
    user_info = getUserInfo(uid)
    free_msg = f"Â∑≤ÊîæÁîü{user_info['statis']['free']}Êù°È±º" if user_info['statis']['free'] else 'ËøòÊ≤°ÊúâÊîæÁîüËøáÈ±º'
    sell_msg = f"Â∑≤ÂçñÂá∫{user_info['statis']['sell']}ÈáëÂ∏ÅÁöÑÈ±º" if user_info['statis']['sell'] else 'ËøòÊ≤°ÊúâÂá∫ÂîÆËøáÈ±º'
    total_msg = f"ÊÄªÂÖ±Èíì‰∏ä‰∫Ü{user_info['statis']['total_fish']}Êù°È±º" if user_info['statis']['total_fish'] else 'ËøòÊ≤°ÊúâÈíì‰∏äËøáÈ±º'
    await bot.send(ev, f'ÈíìÈ±ºÁªüËÆ°Ôºö\n{free_msg}\n{sell_msg}\n{total_msg}', at_sender=True)


@sv.on_prefix('#Êç¢È±ºÁ´ø', 'ÔºÉÊç¢È±ºÁ´ø')
async def change_rod_func(bot, ev):
    message = ev.message.extract_plain_text().strip()
    if not message:
        await bot.send(ev, rod_help)
        return
    if not str.isdigit(message):
        return
    _id = int(message)
    uid = ev.user_id
    result = change_fishrod(uid, _id)
    await bot.send(ev, result['msg'])


@sv.on_prefix('#ÊâîÊºÇÊµÅÁì∂', '#‰∏¢ÊºÇÊµÅÁì∂', 'ÔºÉÊâîÊºÇÊµÅÁì∂')
async def driftbottle_throw(bot, ev):
    message = ev.message
    uid = ev.user_id
    if check_permission(uid):
        await bot.send(ev, 'Ê≤≥Á•ûÊãíÁªù‰∫Ü‰Ω†ÁöÑÊºÇÊµÅÁì∂...' + no)
        return
    user_info = getUserInfo(uid)
    if not user_info['fish']['‚úâ']:
        await bot.send(ev, 'ËÉåÂåÖÈáåÊ≤°ÊúâÊºÇÊµÅÁì∂Âñî' + no)
        return
    if not throw_freq.check(uid) and not config.DEBUG_MODE:
        await bot.send(ev, 'ÂÜ∞Á•àÊ≠£Âú®ÊäïÊîæÊÇ®ÁöÑÊºÇÊµÅÁì∂Ôºå‰ºëÊÅØ‰∏Ä‰ºöÂÜçÊù•Âêß~' + f'({int(throw_freq.left_time(uid))}s)')
        return
    resp = check_content(message)
    if resp['code']<0:
        await bot.send(ev, resp['reason'])
        return
    gid = ev.group_id
    _time = ev.time
    decrease_value(uid, 'fish', '‚úâ', 1)
    resp = set_bottle(uid, gid, _time, message)
    throw_freq.start_cd(uid)
    await bot.send(ev, '‰Ω†Â∞ÜÊºÇÊµÅÁì∂ÊîæÂÖ•‰∫ÜÊ∞¥‰∏≠ÔºåÁõÆÈÄÅÂÆÉÊºÇÂêëËØó‰∏éËøúÊñπ...')
    chain = []
    await chain_reply(bot, ev, user_id=uid, chain=chain,msg=
                      f'QQ{uid}ÊäïÊîæ‰∫Ü‰∏Ä‰∏™ÊºÇÊµÅÁì∂„ÄÇ\nÁæ§ËÅäÔºö{gid}\nÊó∂Èó¥:{shift_time_style(_time)}\nÊºÇÊµÅÁì∂ID:{resp}\nÂÜÖÂÆπ‰∏∫Ôºö')
    await chain_reply(bot, ev, user_id=uid, chain=chain, msg=message)
    await bot.send_group_forward_msg(group_id=config.ADMIN_GROUP, messages=chain)



@sv.on_fullmatch('#Êç°ÊºÇÊµÅÁì∂', '#ÊçûÊºÇÊµÅÁì∂', 'ÔºÉÊç°ÊºÇÊµÅÁì∂')  # ‰ªÖÂÅöÊµãËØïÁî®
async def driftbottle_get(bot, ev):
    gid = ev.group_id
    uid = ev.user_id
    '''if int(uid) not in SUPERUSERS:
        return'''
    user_info = getUserInfo(uid)
    if user_info['fish']['üîÆ'] < 2:
        await bot.send(ev, 'Êç°ÊºÇÊµÅÁì∂ÈúÄË¶Å‰∏§‰∏™Ê∞¥‰πãÂøÉÂñî' + no)
        return
    bottle_amount = get_bottle_amount()
    if bottle_amount < 5:
        await bot.send(ev, f'ÊºÇÊµÅÁì∂Â§™Â∞ë‰∫Ü({bottle_amount}/5‰∏™)' + no)
        return
    if not get_freq.check(uid) and not config.DEBUG_MODE:
        await bot.send(ev, 'ÊºÇÊµÅÁì∂Á¥Ø‰∫ÜÔºåÈúÄË¶Å‰ºëÊÅØ‰∏Ä‰ºöQAQ' + f'({int(get_freq.left_time(uid))}s)')
        return
    bottle, bottle_id = await check_bottle(bot, ev)
    if not bottle:
        await bot.send(ev, 'Ê≤°ÊúâÊºÇÊµÅÁì∂ÂèØ‰ª•ÊçûÂñî...')
        return
    await bot.send(ev, '‰Ω†ÂºÄÂßãÊâìÊçûÊºÇÊµÅÁì∂...(üîÆ-2)')
    if SEND_FORWARD:
        content = await format_message(bot, ev, bottle, bottle_id)
        await bot.send_group_forward_msg(group_id=ev.group_id, messages=content)
        get_freq.start_cd(uid)
        decrease_value(uid, 'fish', 'üîÆ', 2)
    else:
        content = format_msg_no_forward(bot, ev, bottle, bottle_id)
        await bot.send(ev, content)
        get_freq.start_cd(uid)
        # Â∞±‰∏çÊâ£Ê∞¥‰πãÂøÉ‰∫Ü


@sv.on_prefix('#ÂêàÊàêÊºÇÊµÅÁì∂', 'ÔºÉÂêàÊàêÊºÇÊµÅÁì∂')
async def driftbottle_compound(bot, ev):
    uid = ev.user_id
    message = ev.message.extract_plain_text().strip()
    if not message or not str.isdigit(message):
        amount = 1
    else:
        amount = int(message)
    user_info = getUserInfo(uid)
    result = compound_bottle(uid, amount)
    await bot.send(ev, result['msg'])


@sv.on_prefix('#ban')
async def driftbottle_ban(bot, ev):
    uid = ev.user_id
    if int(uid) not in SUPERUSERS:
        return
    message = ev.message.extract_plain_text().strip()
    if not message:
        return
    id_n_time = message.split()
    if len(id_n_time) == 1:
        ban_id = id_n_time[0]
        if not str.isdigit(ban_id):
            if ban_id == 'list':
                msg = show_blacklist()
                await bot.send(ev, msg)
            else:
                await bot.send(ev, 'QQÂè∑‰∏çÂØπÔºå‰∏çËÉΩËøôÊ†∑ÂÅö')
            return
        resp = add_to_blacklist(ban_id)
        await bot.send(ev, resp)
    elif len(id_n_time) == 2:
        ban_id = id_n_time[0]
        ban_time = id_n_time[1]
        if not str.isdigit(ban_id):
            await bot.send(ev, 'QQÂè∑‰∏çÂØπÔºå‰∏çËÉΩËøôÊ†∑ÂÅö')
            return
        if not str.isdigit(ban_time):
            await bot.send(ev, 'Á¶ÅË®ÄÊó∂Èïø‰∏çÂØπÔºå‰∏çËÉΩËøôÊ†∑ÂÅö')
            return
        resp = add_to_blacklist(ban_id, ban_time)
        await bot.send(ev, resp)
    else:
        await bot.send(ev, 'Áî®Ê≥ï:#ban QQÂè∑ Êó∂Èïø')


@sv.on_prefix('#unban')
async def driftbottle_unban(bot, ev):
    uid = ev.user_id
    if int(uid) not in SUPERUSERS:
        return
    message = ev.message.extract_plain_text().strip()
    if not (message and str.isdigit(message)):
        return
    resp = remove_from_blacklist(message)
    await bot.send(ev, resp)


@sv.on_prefix('#Âà†Èô§')
async def driftbottle_remove(bot, ev):
    gid = ev.group_id
    if gid != config.ADMIN_GROUP:
        return
    uid = ev.user_id
    message = ev.message.extract_plain_text().strip()
    if not (message and str.isdigit(message)):
        return
    if int(uid) not in SUPERUSERS:
        return
    resp = delete_bottle(message)
    await bot.send(ev, resp)


@sv.on_fullmatch('#Ê∏ÖÁ©∫')
async def driftbottle_truncate(bot, ev):
    uid = ev.user_id
    if int(uid) != SUPERUSERS[0]:
        return
    saveData({}, os.path.join(os.path.dirname(__file__), 'db/sea.json'))
    await bot.send(ev, ok)


@sv.on_fullmatch('#ÊºÇÊµÅÁì∂Êï∞Èáè')
async def driftbottle_count(bot, ev):
    bottle_amount = get_bottle_amount()
    if not bottle_amount:
        await bot.send(ev, 'ÁõÆÂâçÊ∞¥‰∏≠Ê≤°ÊúâÊºÇÊµÅÁì∂...')
        return
    await bot.send(ev, f'ÂΩìÂâç‰∏ÄÂÖ±Êúâ{get_bottle_amount()}‰∏™ÊºÇÊµÅÁì∂~')


# @sv.on_prefix('#add')
async def add_items(bot, ev):
    message = ev.message.extract_plain_text().strip()
    uid = ev.user_id
    if uid not in SUPERUSERS:
        return
    if not message:
        return
    fish_n_num = message.split()
    receive_id = fish_n_num[0]
    if not str.isdigit(receive_id):
        return
    if fish_n_num[1] not in ['üîÆ', '‚úâ'] + FISH_LIST:
        return
    if len(fish_n_num) == 2:
        increase_value(receive_id, 'fish', fish_n_num[1], 1)
        await bot.send(ev, 'ok')
    elif len(fish_n_num) == 3:
        item_num = int(fish_n_num[-1])
        increase_value(receive_id, 'fish', fish_n_num[1], item_num)
        await bot.send(ev, 'ok')
    else:
        await bot.send(ev, "syntax:#add QQ_number fish_type (amount[optional])")
        return


@sv.on_prefix('#Êõ¥Êñ∞serif')
async def update_func(bot, ev):
    update_serif()
    await bot.send(ev, ok)


# <--------ÈöèÊú∫‰∫ã‰ª∂ÈõÜ-------->


@sv.on_fullmatch('/1', '/2', '/3', '/4')
async def random_event_trigger(bot, ev):
    uid = ev.user_id
    try:
        event_name = event_flag[str(uid)]
    except:
        hoshino.logger.info('ÈöèÊú∫‰∫ã‰ª∂Êú™Ëß¶Âèë,‰∫ã‰ª∂Ê†áÂøóÊú™Á´ãËµ∑') if config.DEBUG_MODE else None
        return
    if not event_name:
        hoshino.logger.info('ÈöèÊú∫‰∫ã‰ª∂Êú™Ëß¶Âèë,‰∫ã‰ª∂Ê†áÂøóÊú™ËÆæÁΩÆ') if config.DEBUG_MODE else None
        return
    session = interact.find_session(ev, name=event_name)
    if not session.state.get('started'):
        hoshino.logger.info('ÈöèÊú∫‰∫ã‰ª∂Êú™Ëß¶Âèë,sessionÊú™ÈÉ®ÁΩ≤') if config.DEBUG_MODE else None
        return
    if uid != session.creator:
        hoshino.logger.info('ÈùûËß¶ÂèëËÄÖÁöÑÈÄâÊã©') if config.DEBUG_MODE else None
        return
    message = ev.raw_message
    _index = int(message.strip('/')) - 1
    if _index > len(random_event[event_name]['result']):
        hoshino.logger.info('Â∫èÂè∑Ë∂ÖËøáÈÄâÈ°πÊï∞Èáè') if config.DEBUG_MODE else None
        return
    event_flag[str(uid)] = ''
    session.close()
    await random_event[event_name]['result'][_index](bot, ev, uid)